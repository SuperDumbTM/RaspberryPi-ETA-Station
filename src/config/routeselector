import os,sys,json,datetime
sys.path.append(os.path.join(os.path.dirname(os.path.dirname(__file__))))
#from ..eta import eta_process as proc, request as rqst
from eta import details_update as dets

def kmb_conf(lang: str) -> dict:
    dir_translation = {"I":"inbound", "O":"outbound"}

    # route
    with open(dets.KMB_DATA_DIR,"r",encoding="utf-8") as f:
        route_data = json.load(f)["data"]
    input_route = input(">> 請輸入路線編號: ").upper()
    while input_route not in route_data.keys():
        input_route = input(">> 路線不存在，請重新輸入: ").upper()

    # dir
    svs_typ_opts = {}
        # outbound
    if route_data[input_route].get("O",0) != 0:
        print("去程 [O]:") 
        svs_typ_opts["O"] = []
        print("\t 班次類型")
        for st in route_data[input_route]["O"]:
            svs_typ_opts["O"].append(st)
            print("\t[{t}] {desrp}".format(t=st,desrp=route_data[input_route]["O"][st]["orig_"+lang]+"→"+route_data[input_route]["O"][st]["dest_"+lang]))
        # inbound
    if route_data[input_route].get("I",0)!=0: 
        print("回程 [I]:") 
        svs_typ_opts["I"] = []
        print("\t 班次類型")
        for st in route_data[input_route]["I"]:
            svs_typ_opts["I"].append(st)
            print("\t[{t}] {desrp}".format(t=st,desrp=route_data[input_route]["I"][st]["orig_"+lang]+"→"+route_data[input_route]["I"][st]["dest_"+lang]))
    
    input_dir = input(">> 請選行車方向: ").upper()
    while input_dir not in svs_typ_opts.keys():
        input_dir = input(">> 行車方向選項不存在，請重新輸入: ").upper()

    # service type
    input_svs_typ = input(">> 請選擇班次類型: ")
    while input_svs_typ not in svs_typ_opts[input_dir]:
        input_svs_typ = input(">> 班次類別不存在，請重新輸入: ")
        
    input_dir = dir_translation[input_dir]
    # stop
        # caching route-stop data
    route_data_dir = dets.KMB_CACHE_PAR_DIR+input_route+"-"+input_dir+"-"+str(input_svs_typ)+".json"
    if dets.is_outdated(route_data_dir):
        dets.kmb_route_stop_data_update(input_route,input_dir,input_svs_typ)

    with open(route_data_dir,'r',encoding="utf-8") as f:
        stop_data = json.load(f)["data"]
        print("{route} {dir} {st} - 車站列表".format(route=input_route,dir=input_dir,st=input_svs_typ))
        
        idx = 0
        for stop in stop_data:
            print("{seq:<4} {name}".format(seq="["+str(idx)+"]",name=stop["name_"+lang]))
            idx += 1

        
        input_seq = input(">> 請輸入車站編號: ")
        while True:
            try:
                if int(input_seq) <= 0 or int(input_seq)>len(stop_data)-1:
                    input_seq = input(">> 輸入無效，請重新選擇: ")
                else: 
                    print("b")
                    break
            except ValueError:
                input_seq = input(">> 車站選項不存在，請重新輸入: ")
                
    return {
                "eta_co":"kmb",
                "route":input_route,
                "dir":input_dir,
                "services_type":int(input_svs_typ),
                "seq":int(input_seq),
                "lang":lang
            }
    
def mtr_lrt_conf(lang: str) -> dict:
    with open(dets.MTR_LRT_RT_DATA_DIR,"r",encoding="utf-8") as f:
        route_data = json.load(f)
        dir_translation = {"I":"inbound", "O":"outbound"}
        route_list = []
        for rt in route_data.keys():
            route_list.append(rt)

        # route
        print(">> 請輸入路線編號\n>> {rt}: ".format(rt=route_list),end="")
        input_route = input().upper()
        while input_route not in route_list:
            input_route = input(">> 路線不存在，請重新輸入: ").upper()

        # direction
        print("去程:")
        print("\t[O]",route_data[input_route]["details"]["outbound"]["linename_"+lang])
        print("回程:")
        print("\t[I]",route_data[input_route]["details"]["inbound"]["linename_"+lang])
        input_dir = input(">> 請選行車方向: ").upper()
        input_dir = dir_translation[input_dir]
        while input_dir not in ("outbound","inbound"):
            input_dir = input(">> 行車方向選項不存在，請重新輸入: ").upper()
        print()

        # station
        with open(dets.MTR_LRT_RT_DATA_PAR_DIR+input_route+".json","r",encoding="utf-8") as g:
            stations_data = json.load(g)
            
            platform_id_list = []
            station_id_list = []
            print(input_route, input_dir, "- 車站列表")
            print("[編號] 車站站名\n")
            for station in stations_data[input_dir]:
                platform_id_list.append(station["platform_id"])
                station_id_list.append(station["station_id"])
                print("{seq:<4} {name}".format(seq="["+str(station["seq"])+"]",name=station["name_"+lang]))

            input_seq = input(">> 請輸入車站編號: ")
            while True:
                try:
                    if int(input_seq) <= 0 or int(input_seq) > len(platform_id_list):
                        input_seq = input(">> 輸入無效，請重新選擇: ")
                    else: break
                except ValueError:
                    input_seq = input(">> 車站選項不存在，請重新輸入: ")
            
    return {
                'eta_co': "mtr_lrt",
                'route': input_route,
                'dir': input_dir,
                'platform_id': platform_id_list[int(input_seq)-1],
                'station_id': station_id_list[int(input_seq)-1],
                'lang': lang
            }

def mtr_bus_conf(lang: str) -> dict:

    with open(dets.MTR_BUS_DATA_DIR,"r",encoding="utf-8") as f:
        route_data = json.load(f)['data']
        dir_translation = {"I":"inbound", "O":"outbound"}
        route_list = []
        for rt in route_data.keys():
            route_list.append(rt)

        # route
        print(">> 請輸入路線編號\n>> {rt}: ".format(rt=route_list),end="")
        input_route = input().upper()
        while input_route not in route_list:
            input_route = input(">> 路線不存在，請重新輸入: ").upper()

        # direction
        if route_data[input_route]["details"].get("inbound",0) != 0:
            print("去程/outbound:")
            print("\t[O]",
                route_data[input_route]["details"]["outbound"]["orig"]["name_"+lang]+"→"+route_data[input_route]["details"]["outbound"]["dest"]["name_"+lang])
            print("回程/inbound:")
            print("\t[I]",
                route_data[input_route]["details"]["inbound"]["orig"]["name_"+lang]+"→"+route_data[input_route]["details"]["inbound"]["dest"]["name_"+lang])
            input_dir = input(">> 請選行車方向 [O/I]: ").upper()
            input_dir = dir_translation[input_dir]
        else:
            print("所選路線為循環線/單向路線，無需選擇")
            input_dir = "outbound"
        while input_dir not in ("outbound","inbound"):
            input_dir = input(">> 行車方向選項不存在，請重新輸入: ").upper()
        print()

        # stop
        stop_id_list = []
        seq = 1
        print(input_route, input_dir, "- 車站列表")
        print("[編號] 車站站名\n")
        for stop_id,stop in route_data[input_route]["stations"][input_dir].items():
            stop_id_list.append(stop_id)
            print("{seq:<4} {name}".format(seq="["+str(seq)+"]",name=stop["name_"+lang]))
            seq+=1

        input_seq = input(">> 請輸入車站編號: ")
        while True:
            try:
                if int(input_seq) <= 0 or int(input_seq) > len(stop_id_list):
                    input_seq = input(">> 輸入無效，請重新選擇: ")
                else: break
            except ValueError as e:
                input_seq = input(">> 車站選項不存在，請重新輸入: ")

    return {
                    'eta_co':"mtr_bus",
                    'route':input_route,
                    'dir':input_dir,
                    'stop_id':stop_id_list[int(input_seq)-1],
                    'lang':lang
                }



# debug
if __name__ == "__main__":
    print(kmb_conf("tc"))
    #print(mtr_lrt_conf())
    #print(mtr_bus_conf())